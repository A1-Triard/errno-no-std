name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        rust: ["1.59", stable, beta, nightly]
        triple: [""]
        features: ["", "--features=std"]
        include:
        - os: ubuntu-latest
          rust: nightly
          features: ""
          triple: x86_64-unknown-linux-gnu
        - os: macOS-latest
          rust: nightly
          features: ""
          triple: x86_64-apple-darwin
        - os: windows-latest
          rust: nightly
          features: ""
          triple: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
    - name: install locales
      run: "sudo apt-get update && sudo apt-get install language-pack-ja language-pack-uk -y"
      if: "${{ matrix.os == 'ubuntu-latest' }}"
    - name: add locale ja_JP.EUC-JP
      run: "sudo sh -c 'echo ja_JP EUC-JP >> /etc/locale.gen'"
      if: "${{ matrix.os == 'ubuntu-latest' }}"
    - name: add locale uk_UA.KOI8-U
      run: "sudo sh -c 'echo uk_UA KOI8-U >> /etc/locale.gen'"
      if: "${{ matrix.os == 'ubuntu-latest' }}"
    - name: locale-gen
      run: "sudo locale-gen"
      if: "${{ matrix.os == 'ubuntu-latest' }}"
    - uses: fjogeleit/http-request-action@v1
      id: tw_download_url_request
      with:
        url: 'https://store.rg-adguard.net/api/GetFiles'
        method: 'POST'
        timeout: 60000
        contentType: 'application/x-www-form-urlencoded'
        data: 'type=url&url=https://apps.microsoft.com/store/detail/%E4%B8%AD%E6%96%87-%E7%B9%81%E9%AB%94-%E7%95%B6%E5%9C%B0%E9%AB%94%E9%A9%97%E5%A5%97%E4%BB%B6/9PCJ4DHCQ1JQ'
      if: "${{ matrix.os == 'windows-latest' }}"
    - uses: DamianReeves/write-file-action
      with:
        path: download_url_table.html
        contents: "${{ steps.tw_download_url_request.outputs.response }}"
        write-mode: rewrite
    - name: install tidy
      run: choco install html-tidy -y
      if: "${{ matrix.os == 'windows-latest' }}"
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true
    - name: build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: "--verbose --no-default-features ${{ matrix.fetures }}"
    - name: test --tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: "--verbose --tests --no-default-features ${{ matrix.features }}"
    - name: test --doc
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: "--verbose --doc --no-default-features ${{ matrix.features }}"
    - name: doc
      uses: actions-rs/cargo@v1
      with:
        command: doc
        args: "--verbose --no-default-features ${{ matrix.fetures }}"
    - name: build --release
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: "--verbose --release --no-default-features ${{ matrix.fetures }}"
    - name: rustup component add rust-src
      run: "rustup component add rust-src --toolchain nightly-${{ matrix.triple }}"
      if: "${{ matrix.triple != '' }}"
    - name: ensure_no_std build
      run: "cargo +nightly build --verbose -Z build-std=core,panic_abort --target ${{ matrix.triple }} --release"
      working-directory: ensure_no_std
      if: "${{ matrix.triple != '' }}"
    - name: ensure_no_std run
      run: "./ensure_no_std/target/${{ matrix.triple }}/release/ensure_no_std"
      if: "${{ matrix.triple != '' }}"
